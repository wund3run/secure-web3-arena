// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { withErrorHandling } from '@/utils/apiErrorHandler';

// Create Supabase client with environment validation
export const supabase = createClient<Database>(
  import.meta.env.VITE_SUPABASE_URL!,
  import.meta.env.VITE_SUPABASE_ANON_KEY!,
  {
    auth: {
      autoRefreshToken: true,
      persistSession: true,
      detectSessionInUrl: true
    },
    realtime: {
      params: {
        eventsPerSecond: 10
      }
    }
  }
);

// Refactor handleSupabaseError to:
// export async function handleSupabaseError<T>(operation: () => Promise<T>): Promise<{ data: T | null; error: string | null }> {
//   const result = await withErrorHandling(operation, { customMessage: 'Supabase operation failed', context: 'SupabaseClient', retryable: true });
//   return { data: result, error: result ? null : 'Unknown error occurred' };
// }

// Error handling wrapper
export async function handleSupabaseError<T>(
  operation: () => Promise<T>
): Promise<{ data: T | null; error: string | null }> {
  const result = await withErrorHandling(operation, { customMessage: 'Supabase operation failed', context: 'SupabaseClient', retryable: true });
  return { data: result, error: result ? null : 'Unknown error occurred' };
}