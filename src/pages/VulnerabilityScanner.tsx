
import React, { useState } from 'react';
import { StandardLayout } from '@/components/layout/StandardLayout';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { 
  Scan, 
  Upload, 
  AlertCircle, 
  CheckCircle, 
  Clock,
  FileText,
  Zap,
  Shield,
  Target,
  Download,
  Play,
  Settings
} from 'lucide-react';

const VulnerabilityScanner = () => {
  const [scanType, setScanType] = useState('quick');
  const [isScanning, setIsScanning] = useState(false);

  const scanTypes = [
    {
      id: 'quick',
      title: 'Quick Scan',
      description: 'Fast security scan for common vulnerabilities',
      duration: '2-5 minutes',
      checks: 25,
      icon: <Zap className="h-5 w-5" />
    },
    {
      id: 'comprehensive',
      title: 'Comprehensive Scan',
      description: 'Deep analysis including gas optimization and advanced security patterns',
      duration: '10-30 minutes',
      checks: 150,
      icon: <Target className="h-5 w-5" />
    },
    {
      id: 'custom',
      title: 'Custom Scan',
      description: 'Tailored scan with specific security focus areas',
      duration: '5-20 minutes',
      checks: 'Variable',
      icon: <Settings className="h-5 w-5" />
    }
  ];

  const recentScans = [
    {
      id: 1,
      project: 'DeFi Protocol V2',
      status: 'completed',
      issues: 3,
      critical: 0,
      high: 1,
      medium: 2,
      low: 0,
      date: '2024-01-15',
      time: '14:32'
    },
    {
      id: 2,
      project: 'NFT Marketplace Contract',
      status: 'completed',
      issues: 0,
      critical: 0,
      high: 0,
      medium: 0,
      low: 0,
      date: '2024-01-15',
      time: '12:15'
    },
    {
      id: 3,
      project: 'Token Contract',
      status: 'in-progress',
      issues: null,
      critical: null,
      high: null,
      medium: null,
      low: null,
      date: '2024-01-15',
      time: '15:45'
    },
    {
      id: 4,
      project: 'Governance Contract',
      status: 'completed',
      issues: 7,
      critical: 1,
      high: 2,
      medium: 3,
      low: 1,
      date: '2024-01-14',
      time: '16:20'
    }
  ];

  const vulnerabilityCategories = [
    { name: 'Reentrancy', detected: 12, severity: 'high' },
    { name: 'Integer Overflow', detected: 8, severity: 'medium' },
    { name: 'Access Control', detected: 15, severity: 'critical' },
    { name: 'Gas Optimization', detected: 23, severity: 'low' },
    { name: 'Oracle Manipulation', detected: 5, severity: 'high' },
    { name: 'Flash Loan Attacks', detected: 3, severity: 'critical' }
  ];

  const handleStartScan = () => {
    setIsScanning(true);
    // Simulate scanning process
    setTimeout(() => {
      setIsScanning(false);
    }, 3000);
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'completed': return 'bg-green-100 text-green-800';
      case 'in-progress': return 'bg-blue-100 text-blue-800';
      case 'failed': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'bg-red-100 text-red-800';
      case 'high': return 'bg-orange-100 text-orange-800';
      case 'medium': return 'bg-yellow-100 text-yellow-800';
      case 'low': return 'bg-green-100 text-green-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'completed': return <CheckCircle className="h-4 w-4 text-green-500" />;
      case 'in-progress': return <Clock className="h-4 w-4 text-blue-500" />;
      case 'failed': return <AlertCircle className="h-4 w-4 text-red-500" />;
      default: return <Clock className="h-4 w-4 text-gray-500" />;
    }
  };

  return (
    <StandardLayout
      title="Vulnerability Scanner | Hawkly"
      description="Automated security scanning for Web3 applications and smart contracts"
    >
      <div className="container mx-auto px-4 py-8">
        {/* Hero Section */}
        <div className="text-center mb-12">
          <Badge variant="outline" className="px-4 py-2 mb-4">
            <Scan className="h-4 w-4 mr-2" />
            Automated Security Scanning
          </Badge>
          <h1 className="text-4xl font-bold text-hawkly-gradient mb-4">
            Vulnerability Scanner
          </h1>
          <p className="text-xl text-muted-foreground max-w-3xl mx-auto">
            Comprehensive automated security scanning for smart contracts and Web3 applications. 
            Detect vulnerabilities, gas inefficiencies, and security best practice violations.
          </p>
        </div>

        <Tabs defaultValue="scan" className="space-y-8">
          <TabsList className="grid w-full grid-cols-4">
            <TabsTrigger value="scan">New Scan</TabsTrigger>
            <TabsTrigger value="results">Scan Results</TabsTrigger>
            <TabsTrigger value="analytics">Analytics</TabsTrigger>
            <TabsTrigger value="history">Scan History</TabsTrigger>
          </TabsList>

          <TabsContent value="scan" className="space-y-8">
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
              {/* Scan Configuration */}
              <div className="lg:col-span-2 space-y-6">
                <Card>
                  <CardHeader>
                    <CardTitle>Choose Scan Type</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                      {scanTypes.map((type) => (
                        <Card 
                          key={type.id} 
                          className={`cursor-pointer transition-all ${
                            scanType === type.id ? 'ring-2 ring-primary bg-primary/5' : 'hover:shadow-md'
                          }`}
                          onClick={() => setScanType(type.id)}
                        >
                          <CardContent className="p-4 text-center space-y-3">
                            <div className="mx-auto w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center">
                              {type.icon}
                            </div>
                            <div>
                              <h3 className="font-semibold">{type.title}</h3>
                              <p className="text-sm text-muted-foreground">{type.description}</p>
                            </div>
                            <div className="text-xs text-muted-foreground space-y-1">
                              <div>Duration: {type.duration}</div>
                              <div>Security Checks: {type.checks}</div>
                            </div>
                          </CardContent>
                        </Card>
                      ))}
                    </div>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader>
                    <CardTitle>Upload Contract or Code</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-6">
                    <div className="space-y-4">
                      <div>
                        <label className="block text-sm font-medium mb-2">Contract Address (Optional)</label>
                        <Input placeholder="0x..." />
                      </div>
                      
                      <div>
                        <label className="block text-sm font-medium mb-2">Upload Source Code</label>
                        <div className="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center">
                          <Upload className="mx-auto h-12 w-12 text-gray-400 mb-4" />
                          <h3 className="text-lg font-medium text-gray-900 mb-2">
                            Drop files here or click to upload
                          </h3>
                          <p className="text-gray-500">
                            Supports .sol, .js, .ts, .py files up to 10MB
                          </p>
                          <Button className="mt-4" variant="outline">
                            <Upload className="h-4 w-4 mr-2" />
                            Choose Files
                          </Button>
                        </div>
                      </div>

                      <div>
                        <label className="block text-sm font-medium mb-2">Or Paste Code</label>
                        <Textarea 
                          placeholder="Paste your smart contract code here..."
                          rows={8}
                        />
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </div>

              {/* Scan Summary */}
              <div className="space-y-6">
                <Card>
                  <CardHeader>
                    <CardTitle>Scan Summary</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="space-y-2">
                      <div className="flex justify-between">
                        <span className="text-sm">Scan Type:</span>
                        <Badge variant="outline">
                          {scanTypes.find(t => t.id === scanType)?.title}
                        </Badge>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-sm">Estimated Time:</span>
                        <span className="text-sm text-muted-foreground">
                          {scanTypes.find(t => t.id === scanType)?.duration}
                        </span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-sm">Security Checks:</span>
                        <span className="text-sm text-muted-foreground">
                          {scanTypes.find(t => t.id === scanType)?.checks}
                        </span>
                      </div>
                    </div>
                    
                    <Button 
                      className="w-full" 
                      size="lg"
                      onClick={handleStartScan}
                      disabled={isScanning}
                    >
                      {isScanning ? (
                        <>
                          <Clock className="h-4 w-4 mr-2 animate-spin" />
                          Scanning...
                        </>
                      ) : (
                        <>
                          <Play className="h-4 w-4 mr-2" />
                          Start Scan
                        </>
                      )}
                    </Button>
                  </CardContent>
                </Card>

                {/* Scan Progress (shows when scanning) */}
                {isScanning && (
                  <Card>
                    <CardHeader>
                      <CardTitle>Scan Progress</CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-4">
                      <div className="space-y-2">
                        <div className="flex justify-between text-sm">
                          <span>Analyzing code structure...</span>
                          <span>75%</span>
                        </div>
                        <div className="w-full bg-gray-200 rounded-full h-2">
                          <div className="bg-primary h-2 rounded-full" style={{ width: '75%' }}></div>
                        </div>
                      </div>
                      <div className="text-sm text-muted-foreground">
                        Current: Checking for reentrancy vulnerabilities
                      </div>
                    </CardContent>
                  </Card>
                )}
              </div>
            </div>
          </TabsContent>

          <TabsContent value="results" className="space-y-8">
            <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
              {/* Severity Summary Cards */}
              <Card className="bg-red-50 border-red-200">
                <CardContent className="p-6 text-center">
                  <AlertCircle className="mx-auto h-8 w-8 text-red-500 mb-2" />
                  <div className="text-2xl font-bold text-red-700">1</div>
                  <div className="text-sm text-red-600">Critical</div>
                </CardContent>
              </Card>
              
              <Card className="bg-orange-50 border-orange-200">
                <CardContent className="p-6 text-center">
                  <AlertCircle className="mx-auto h-8 w-8 text-orange-500 mb-2" />
                  <div className="text-2xl font-bold text-orange-700">3</div>
                  <div className="text-sm text-orange-600">High</div>
                </CardContent>
              </Card>
              
              <Card className="bg-yellow-50 border-yellow-200">
                <CardContent className="p-6 text-center">
                  <AlertCircle className="mx-auto h-8 w-8 text-yellow-500 mb-2" />
                  <div className="text-2xl font-bold text-yellow-700">5</div>
                  <div className="text-sm text-yellow-600">Medium</div>
                </CardContent>
              </Card>
              
              <Card className="bg-green-50 border-green-200">
                <CardContent className="p-6 text-center">
                  <CheckCircle className="mx-auto h-8 w-8 text-green-500 mb-2" />
                  <div className="text-2xl font-bold text-green-700">2</div>
                  <div className="text-sm text-green-600">Low</div>
                </CardContent>
              </Card>
            </div>

            {/* Detailed Results */}
            <Card>
              <CardHeader>
                <div className="flex items-center justify-between">
                  <CardTitle>Scan Results - DeFi Protocol V2</CardTitle>
                  <div className="flex gap-2">
                    <Button variant="outline" size="sm">
                      <Download className="h-4 w-4 mr-2" />
                      Export PDF
                    </Button>
                    <Button variant="outline" size="sm">
                      <FileText className="h-4 w-4 mr-2" />
                      View Report
                    </Button>
                  </div>
                </div>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {[
                    {
                      severity: 'critical',
                      title: 'Reentrancy Vulnerability in withdraw() Function',
                      description: 'The withdraw function is vulnerable to reentrancy attacks due to external call before state update.',
                      line: 'Line 45-52',
                      recommendation: 'Use checks-effects-interactions pattern or ReentrancyGuard'
                    },
                    {
                      severity: 'high',
                      title: 'Missing Access Control on Admin Functions',
                      description: 'Critical admin functions lack proper access control modifiers.',
                      line: 'Line 78-85',
                      recommendation: 'Add onlyOwner or role-based access control'
                    },
                    {
                      severity: 'high',
                      title: 'Integer Overflow in Token Calculation',
                      description: 'Potential integer overflow in token amount calculations.',
                      line: 'Line 123',
                      recommendation: 'Use SafeMath library or Solidity 0.8+ built-in overflow protection'
                    },
                    {
                      severity: 'medium',
                      title: 'Gas Inefficient Loop Implementation',
                      description: 'Unbounded loop could lead to gas limit issues.',
                      line: 'Line 156-162',
                      recommendation: 'Implement pagination or limit loop iterations'
                    }
                  ].map((issue, index) => (
                    <div key={index} className="border rounded-lg p-4 space-y-2">
                      <div className="flex items-start justify-between">
                        <div className="flex items-start gap-3">
                          <Badge className={getSeverityColor(issue.severity)}>
                            {issue.severity.toUpperCase()}
                          </Badge>
                          <div className="space-y-1">
                            <h4 className="font-semibold">{issue.title}</h4>
                            <p className="text-sm text-muted-foreground">{issue.description}</p>
                            <div className="text-xs text-muted-foreground">{issue.line}</div>
                            <div className="text-sm">
                              <span className="font-medium">Recommendation: </span>
                              {issue.recommendation}
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="analytics" className="space-y-8">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
              <Card>
                <CardHeader>
                  <CardTitle>Vulnerability Categories</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {vulnerabilityCategories.map((category, index) => (
                      <div key={index} className="flex items-center justify-between">
                        <div className="flex items-center gap-3">
                          <Badge className={getSeverityColor(category.severity)}>
                            {category.severity}
                          </Badge>
                          <span className="font-medium">{category.name}</span>
                        </div>
                        <span className="text-sm text-muted-foreground">
                          {category.detected} detected
                        </span>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle>Security Score Trend</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <div className="text-center">
                      <div className="text-3xl font-bold text-green-600">85/100</div>
                      <div className="text-sm text-muted-foreground">Current Security Score</div>
                    </div>
                    <div className="w-full bg-gray-200 rounded-full h-3">
                      <div className="bg-green-500 h-3 rounded-full" style={{ width: '85%' }}></div>
                    </div>
                    <div className="text-sm text-muted-foreground text-center">
                      +5 points from last scan
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          <TabsContent value="history" className="space-y-8">
            <Card>
              <CardHeader>
                <CardTitle>Recent Scans</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {recentScans.map((scan) => (
                    <div key={scan.id} className="flex items-center justify-between p-4 bg-muted/50 rounded-lg">
                      <div className="flex items-center gap-4">
                        {getStatusIcon(scan.status)}
                        <div>
                          <h3 className="font-semibold">{scan.project}</h3>
                          <p className="text-sm text-muted-foreground">
                            {scan.date} at {scan.time}
                          </p>
                        </div>
                      </div>
                      <div className="flex items-center gap-4">
                        <Badge className={getStatusColor(scan.status)}>
                          {scan.status}
                        </Badge>
                        {scan.issues !== null && (
                          <div className="flex items-center gap-2 text-sm">
                            {scan.critical > 0 && (
                              <Badge variant="error" className="text-xs">
                                {scan.critical} Critical
                              </Badge>
                            )}
                            {scan.high > 0 && (
                              <Badge className="bg-orange-100 text-orange-800 text-xs">
                                {scan.high} High
                              </Badge>
                            )}
                            {scan.medium > 0 && (
                              <Badge className="bg-yellow-100 text-yellow-800 text-xs">
                                {scan.medium} Medium
                              </Badge>
                            )}
                            {scan.issues === 0 && (
                              <Badge variant="outline" className="text-green-600 text-xs">
                                No Issues
                              </Badge>
                            )}
                          </div>
                        )}
                        <Button size="sm" variant="outline">
                          View Report
                        </Button>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </StandardLayout>
  );
};

export default VulnerabilityScanner;
