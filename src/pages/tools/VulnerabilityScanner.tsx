
import React, { useState, useRef } from 'react';
import { StandardLayout } from '@/components/layout/StandardLayout';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Progress } from '@/components/ui/progress';
import { 
  Scan, 
  AlertCircle, 
  CheckCircle, 
  Upload, 
  FileText, 
  Download, 
  Eye, 
  RefreshCw,
  Clock,
  Shield,
  Zap,
  ExternalLink
} from 'lucide-react';
import { useNavigate } from 'react-router-dom';
import { toast } from '@/components/ui/use-toast';

interface ScanResult {
  id: string;
  project: string;
  status: 'Complete' | 'In Progress' | 'Failed';
  issues: number | null;
  scanType: 'Quick' | 'Comprehensive';
  timestamp: Date;
  progress?: number;
}

const VulnerabilityScannerPage = () => {
  const navigate = useNavigate();
  const fileInputRef = useRef<HTMLInputElement>(null);
  const [isScanning, setIsScanning] = useState(false);
  const [scanProgress, setScanProgress] = useState(0);
  const [contractCode, setContractCode] = useState('');
  const [contractUrl, setContractUrl] = useState('');
  const [scanResults, setScanResults] = useState<ScanResult[]>([
    { 
      id: '1', 
      project: "DeFi Protocol", 
      status: "Complete", 
      issues: 0, 
      scanType: 'Comprehensive',
      timestamp: new Date(Date.now() - 3600000) // 1 hour ago
    },
    { 
      id: '2', 
      project: "NFT Marketplace", 
      status: "Complete", 
      issues: 3, 
      scanType: 'Quick',
      timestamp: new Date(Date.now() - 7200000) // 2 hours ago
    },
    { 
      id: '3', 
      project: "Token Contract", 
      status: "In Progress", 
      issues: null, 
      scanType: 'Comprehensive',
      timestamp: new Date(),
      progress: 65
    }
  ]);

  // Simulate scanning process
  const simulateScan = async (scanType: 'Quick' | 'Comprehensive') => {
    setIsScanning(true);
    setScanProgress(0);

    const duration = scanType === 'Quick' ? 3000 : 8000;
    const steps = 20;
    const stepDuration = duration / steps;

    for (let i = 0; i <= steps; i++) {
      await new Promise(resolve => setTimeout(resolve, stepDuration));
      setScanProgress((i / steps) * 100);
    }

    // Generate mock results
    const mockIssues = Math.floor(Math.random() * 5);
    const newScan: ScanResult = {
      id: Date.now().toString(),
      project: `Contract Scan ${Date.now()}`,
      status: 'Complete',
      issues: mockIssues,
      scanType,
      timestamp: new Date()
    };

    setScanResults(prev => [newScan, ...prev]);
    setIsScanning(false);
    setScanProgress(0);

    toast({
      title: "Scan Complete",
      description: `${scanType} scan finished. Found ${mockIssues} potential issues.`,
      variant: mockIssues === 0 ? "default" : "destructive"
    });
  };

  // Handler for quick scan
  const handleQuickScan = async () => {
    if (!contractCode.trim() && !contractUrl.trim()) {
      toast({
        title: "No Contract Provided",
        description: "Please upload a file, paste code, or provide a contract URL.",
        variant: "destructive"
      });
      return;
    }

    toast({
      title: "Starting Quick Scan",
      description: "Analyzing your smart contract for common vulnerabilities...",
    });

    await simulateScan('Quick');
  };

  // Handler for comprehensive scan
  const handleComprehensiveScan = async () => {
    if (!contractCode.trim() && !contractUrl.trim()) {
      toast({
        title: "No Contract Provided",
        description: "Please upload a file, paste code, or provide a contract URL.",
        variant: "destructive"
      });
      return;
    }

    toast({
      title: "Starting Comprehensive Scan",
      description: "Performing deep analysis including gas optimization and security best practices...",
    });

    await simulateScan('Comprehensive');
  };

  // Handler for file upload
  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        const content = e.target?.result as string;
        setContractCode(content);
        toast({
          title: "File Uploaded",
          description: `${file.name} has been loaded successfully.`,
        });
      };
      reader.readAsText(file);
    }
  };

  // Handler for viewing scan report
  const handleViewReport = (scanId: string) => {
    navigate(`/vulnerability-scanner/report/${scanId}`);
  };

  // Handler for downloading report
  const handleDownloadReport = async (scan: ScanResult) => {
    try {
      toast({
        title: "Generating Report",
        description: "Preparing your vulnerability scan report...",
      });

      // Simulate report generation
      await new Promise(resolve => setTimeout(resolve, 2000));

      // Create and download mock report
      const reportContent = `
Vulnerability Scan Report
========================
Project: ${scan.project}
Scan Type: ${scan.scanType}
Date: ${scan.timestamp.toISOString()}
Issues Found: ${scan.issues || 'N/A'}
Status: ${scan.status}

Detailed analysis and recommendations would be included here...
      `;

      const blob = new Blob([reportContent], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `vulnerability-report-${scan.id}.txt`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);

      toast({
        title: "Report Downloaded",
        description: "Vulnerability scan report has been downloaded successfully.",
      });
    } catch (error) {
      toast({
        title: "Download Failed",
        description: "Failed to download report. Please try again.",
        variant: "destructive"
      });
    }
  };

  // Handler for refreshing scans
  const handleRefreshScans = () => {
    toast({
      title: "Refreshing",
      description: "Updating scan results...",
    });
    // In a real app, this would fetch fresh data from the API
  };

  return (
    <StandardLayout
      title="Vulnerability Scanner | Hawkly"
      description="Automated security scanning for Web3 applications"
    >
      <div className="container mx-auto px-4 py-8">
        <div className="text-center mb-12">
          <Badge variant="outline" className="px-4 py-2 mb-4">
            <Scan className="h-4 w-4 mr-2" />
            Automated Scanning
          </Badge>
          <h1 className="text-4xl font-bold text-hawkly-gradient mb-4">
            Vulnerability Scanner
          </h1>
          <p className="text-xl text-muted-foreground">
            Comprehensive automated security scanning for smart contracts and dApps
          </p>
        </div>

        {/* Contract Input Section */}
        <Card className="mb-8">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <FileText className="h-5 w-5" />
              Contract Input
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium mb-2">Upload Contract File</label>
                <div className="flex gap-2">
                  <Button
                    variant="outline"
                    onClick={() => fileInputRef.current?.click()}
                    className="flex-1"
                  >
                    <Upload className="h-4 w-4 mr-2" />
                    Choose File
                  </Button>
                  <input
                    ref={fileInputRef}
                    type="file"
                    accept=".sol,.js,.ts,.json"
                    onChange={handleFileUpload}
                    className="hidden"
                  />
                </div>
              </div>
              <div>
                <label className="block text-sm font-medium mb-2">Contract Address/URL</label>
                <Input
                  placeholder="0x... or https://etherscan.io/..."
                  value={contractUrl}
                  onChange={(e) => setContractUrl(e.target.value)}
                />
              </div>
            </div>
            <div>
              <label className="block text-sm font-medium mb-2">Or Paste Contract Code</label>
              <Textarea
                placeholder="pragma solidity ^0.8.0;..."
                value={contractCode}
                onChange={(e) => setContractCode(e.target.value)}
                rows={6}
                className="font-mono text-sm"
              />
            </div>
          </CardContent>
        </Card>

        {/* Scanning Progress */}
        {isScanning && (
          <Card className="mb-8">
            <CardContent className="pt-6">
              <div className="text-center space-y-4">
                <div className="flex items-center justify-center gap-2">
                  <RefreshCw className="h-5 w-5 animate-spin" />
                  <span className="font-medium">Scanning in progress...</span>
                </div>
                <Progress value={scanProgress} className="w-full" />
                <p className="text-sm text-muted-foreground">
                  {scanProgress.toFixed(0)}% complete
                </p>
              </div>
            </CardContent>
          </Card>
        )}

        {/* Scan Options */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Zap className="h-5 w-5 text-yellow-500" />
                Quick Scan
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <p className="text-muted-foreground">
                Upload your smart contract for a quick vulnerability assessment covering common security issues.
              </p>
              <ul className="text-sm space-y-1 text-muted-foreground">
                <li>• Reentrancy vulnerabilities</li>
                <li>• Integer overflow/underflow</li>
                <li>• Access control issues</li>
                <li>• Basic gas optimization</li>
              </ul>
              <Button 
                className="w-full" 
                size="lg"
                onClick={handleQuickScan}
                disabled={isScanning}
              >
                <Scan className="h-4 w-4 mr-2" />
                Start Quick Scan
              </Button>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Shield className="h-5 w-5 text-blue-500" />
                Comprehensive Scan
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <p className="text-muted-foreground">
                Deep analysis including gas optimization, security best practices, and advanced vulnerability detection.
              </p>
              <ul className="text-sm space-y-1 text-muted-foreground">
                <li>• All quick scan features</li>
                <li>• Advanced attack vectors</li>
                <li>• Gas optimization analysis</li>
                <li>• Code quality assessment</li>
                <li>• Best practices compliance</li>
              </ul>
              <Button 
                className="w-full" 
                size="lg" 
                variant="outline"
                onClick={handleComprehensiveScan}
                disabled={isScanning}
              >
                <AlertCircle className="h-4 w-4 mr-2" />
                Start Deep Scan
              </Button>
            </CardContent>
          </Card>
        </div>

        {/* Recent Scans */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center justify-between">
              <div className="flex items-center gap-2">
                <Clock className="h-5 w-5" />
                Recent Scans
              </div>
              <Button variant="outline" size="sm" onClick={handleRefreshScans}>
                <RefreshCw className="h-4 w-4 mr-2" />
                Refresh
              </Button>
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {scanResults.map((scan) => (
                <div key={scan.id} className="flex items-center justify-between p-4 bg-muted/50 rounded-lg">
                  <div className="flex-1">
                    <div className="flex items-center gap-2 mb-1">
                      <h3 className="font-medium">{scan.project}</h3>
                      <Badge variant="outline" className="text-xs">
                        {scan.scanType}
                      </Badge>
                    </div>
                    <div className="flex items-center gap-4 text-sm text-muted-foreground">
                      <span>Status: {scan.status}</span>
                      <span>{scan.timestamp.toLocaleString()}</span>
                    </div>
                    {scan.status === 'In Progress' && scan.progress && (
                      <Progress value={scan.progress} className="w-full mt-2" />
                    )}
                  </div>
                  <div className="flex items-center gap-2 ml-4">
                    {scan.issues !== null && (
                      <Badge variant={scan.issues === 0 ? "default" : "destructive"}>
                        {scan.issues === 0 ? 
                          <CheckCircle className="h-3 w-3 mr-1" /> : 
                          <AlertCircle className="h-3 w-3 mr-1" />
                        }
                        {scan.issues} issues
                      </Badge>
                    )}
                    <div className="flex gap-1">
                      <Button 
                        size="sm" 
                        variant="outline"
                        onClick={() => handleViewReport(scan.id)}
                        disabled={scan.status !== 'Complete'}
                      >
                        <Eye className="h-4 w-4 mr-1" />
                        View
                      </Button>
                      <Button 
                        size="sm" 
                        variant="outline"
                        onClick={() => handleDownloadReport(scan)}
                        disabled={scan.status !== 'Complete'}
                      >
                        <Download className="h-4 
                     );   
};

export default VulnerabilityScanner;
