
import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Label } from '@/components/ui/label';
import { AlertTriangle, Bug, Shield, CheckCircle, Clock, Plus, Search } from 'lucide-react';
import { formatDistanceToNow } from 'date-fns';

interface Vulnerability {
  id: string;
  title: string;
  description: string;
  severity: 'critical' | 'high' | 'medium' | 'low';
  status: 'open' | 'in_review' | 'resolved' | 'false_positive';
  category: string;
  location: string;
  recommendedFix: string;
  reportedBy: string;
  reportedAt: Date;
  updatedAt: Date;
  cweId?: string;
  gasImpact?: number;
}

interface VulnerabilityTrackingSystemProps {
  auditId: string;
  onPendingCountChange: (count: number) => void;
}

export function VulnerabilityTrackingSystem({ auditId, onPendingCountChange }: VulnerabilityTrackingSystemProps) {
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([
    {
      id: '1',
      title: 'Reentrancy Vulnerability in withdraw() Function',
      description: 'The withdraw function is susceptible to reentrancy attacks due to external call before state update.',
      severity: 'critical',
      status: 'open',
      category: 'Smart Contract Security',
      location: 'contracts/Token.sol:L45-52',
      recommendedFix: 'Implement checks-effects-interactions pattern or use ReentrancyGuard modifier.',
      reportedBy: 'Sarah Chen',
      reportedAt: new Date(Date.now() - 86400000),
      updatedAt: new Date(Date.now() - 86400000),
      cweId: 'CWE-362',
      gasImpact: 2000
    },
    {
      id: '2',
      title: 'Integer Overflow in calculateReward()',
      description: 'Potential integer overflow when calculating large reward amounts.',
      severity: 'high',
      status: 'in_review',
      category: 'Mathematical Operations',
      location: 'contracts/Staking.sol:L78-85',
      recommendedFix: 'Use SafeMath library or upgrade to Solidity 0.8+ for automatic overflow protection.',
      reportedBy: 'Sarah Chen',
      reportedAt: new Date(Date.now() - 172800000),
      updatedAt: new Date(Date.now() - 86400000),
      cweId: 'CWE-190'
    }
  ]);

  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState<string>('all');
  const [severityFilter, setSeverityFilter] = useState<string>('all');
  const [isAddingVulnerability, setIsAddingVulnerability] = useState(false);

  React.useEffect(() => {
    const pendingCount = vulnerabilities.filter(v => v.status === 'open' || v.status === 'in_review').length;
    onPendingCountChange(pendingCount);
  }, [vulnerabilities, onPendingCountChange]);

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case 'critical': return <AlertTriangle className="h-4 w-4 text-red-500" />;
      case 'high': return <AlertTriangle className="h-4 w-4 text-orange-500" />;
      case 'medium': return <Bug className="h-4 w-4 text-yellow-500" />;
      case 'low': return <Shield className="h-4 w-4 text-blue-500" />;
      default: return <Bug className="h-4 w-4" />;
    }
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'bg-red-100 text-red-800 border-red-200';
      case 'high': return 'bg-orange-100 text-orange-800 border-orange-200';
      case 'medium': return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'low': return 'bg-blue-100 text-blue-800 border-blue-200';
      default: return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'resolved': return <CheckCircle className="h-4 w-4 text-green-500" />;
      case 'in_review': return <Clock className="h-4 w-4 text-yellow-500" />;
      case 'open': return <AlertTriangle className="h-4 w-4 text-red-500" />;
      default: return <Bug className="h-4 w-4" />;
    }
  };

  const filteredVulnerabilities = vulnerabilities.filter(vuln => {
    const matchesSearch = vuln.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         vuln.description.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesStatus = statusFilter === 'all' || vuln.status === statusFilter;
    const matchesSeverity = severityFilter === 'all' || vuln.severity === severityFilter;
    return matchesSearch && matchesStatus && matchesSeverity;
  });

  const updateVulnerabilityStatus = (id: string, newStatus: string) => {
    setVulnerabilities(prev => 
      prev.map(vuln => 
        vuln.id === id 
          ? { ...vuln, status: newStatus as Vulnerability['status'], updatedAt: new Date() }
          : vuln
      )
    );
  };

  return (
    <div className="space-y-6">
      {/* Header with Stats */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-muted-foreground">Critical</p>
                <p className="text-2xl font-bold text-red-600">
                  {vulnerabilities.filter(v => v.severity === 'critical').length}
                </p>
              </div>
              <AlertTriangle className="h-8 w-8 text-red-500" />
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-muted-foreground">High</p>
                <p className="text-2xl font-bold text-orange-600">
                  {vulnerabilities.filter(v => v.severity === 'high').length}
                </p>
              </div>
              <AlertTriangle className="h-8 w-8 text-orange-500" />
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-muted-foreground">Medium</p>
                <p className="text-2xl font-bold text-yellow-600">
                  {vulnerabilities.filter(v => v.severity === 'medium').length}
                </p>
              </div>
              <Bug className="h-8 w-8 text-yellow-500" />
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-muted-foreground">Low</p>
                <p className="text-2xl font-bold text-blue-600">
                  {vulnerabilities.filter(v => v.severity === 'low').length}
                </p>
              </div>
              <Shield className="h-8 w-8 text-blue-500" />
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Filters and Actions */}
      <div className="flex flex-col sm:flex-row gap-4 items-start sm:items-center justify-between">
        <div className="flex gap-4 flex-1">
          <div className="relative flex-1">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
            <Input
              placeholder="Search vulnerabilities..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="pl-10"
            />
          </div>
          <Select value={statusFilter} onValueChange={setStatusFilter}>
            <SelectTrigger className="w-32">
              <SelectValue placeholder="Status" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Status</SelectItem>
              <SelectItem value="open">Open</SelectItem>
              <SelectItem value="in_review">In Review</SelectItem>
              <SelectItem value="resolved">Resolved</SelectItem>
              <SelectItem value="false_positive">False Positive</SelectItem>
            </SelectContent>
          </Select>
          <Select value={severityFilter} onValueChange={setSeverityFilter}>
            <SelectTrigger className="w-32">
              <SelectValue placeholder="Severity" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Severity</SelectItem>
              <SelectItem value="critical">Critical</SelectItem>
              <SelectItem value="high">High</SelectItem>
              <SelectItem value="medium">Medium</SelectItem>
              <SelectItem value="low">Low</SelectItem>
            </SelectContent>
          </Select>
        </div>
        <Dialog open={isAddingVulnerability} onOpenChange={setIsAddingVulnerability}>
          <DialogTrigger asChild>
            <Button>
              <Plus className="h-4 w-4 mr-2" />
              Add Vulnerability
            </Button>
          </DialogTrigger>
          <DialogContent className="max-w-2xl">
            <DialogHeader>
              <DialogTitle>Report New Vulnerability</DialogTitle>
            </DialogHeader>
            <div className="space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="title">Title</Label>
                  <Input id="title" placeholder="Vulnerability title" />
                </div>
                <div>
                  <Label htmlFor="severity">Severity</Label>
                  <Select>
                    <SelectTrigger>
                      <SelectValue placeholder="Select severity" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="critical">Critical</SelectItem>
                      <SelectItem value="high">High</SelectItem>
                      <SelectItem value="medium">Medium</SelectItem>
                      <SelectItem value="low">Low</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
              <div>
                <Label htmlFor="description">Description</Label>
                <Textarea id="description" placeholder="Detailed description of the vulnerability..." />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="location">Location</Label>
                  <Input id="location" placeholder="e.g., contracts/Token.sol:L45-52" />
                </div>
                <div>
                  <Label htmlFor="category">Category</Label>
                  <Input id="category" placeholder="e.g., Smart Contract Security" />
                </div>
              </div>
              <div>
                <Label htmlFor="fix">Recommended Fix</Label>
                <Textarea id="fix" placeholder="Recommended solution..." />
              </div>
              <div className="flex justify-end gap-2">
                <Button variant="outline" onClick={() => setIsAddingVulnerability(false)}>
                  Cancel
                </Button>
                <Button onClick={() => setIsAddingVulnerability(false)}>
                  Add Vulnerability
                </Button>
              </div>
            </div>
          </DialogContent>
        </Dialog>
      </div>

      {/* Vulnerabilities List */}
      <div className="space-y-4">
        {filteredVulnerabilities.map((vulnerability) => (
          <Card key={vulnerability.id} className="hover:shadow-md transition-shadow">
            <CardContent className="p-6">
              <div className="flex items-start justify-between mb-4">
                <div className="flex items-start gap-3">
                  {getSeverityIcon(vulnerability.severity)}
                  <div>
                    <h3 className="font-semibold text-lg">{vulnerability.title}</h3>
                    <div className="flex items-center gap-2 mt-1">
                      <Badge className={getSeverityColor(vulnerability.severity)}>
                        {vulnerability.severity.toUpperCase()}
                      </Badge>
                      <Badge variant="outline" className="flex items-center gap-1">
                        {getStatusIcon(vulnerability.status)}
                        {vulnerability.status.replace('_', ' ').toUpperCase()}
                      </Badge>
                      {vulnerability.cweId && (
                        <Badge variant="secondary">{vulnerability.cweId}</Badge>
                      )}
                    </div>
                  </div>
                </div>
                <Select 
                  value={vulnerability.status} 
                  onValueChange={(value) => updateVulnerabilityStatus(vulnerability.id, value)}
                >
                  <SelectTrigger className="w-32">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="open">Open</SelectItem>
                    <SelectItem value="in_review">In Review</SelectItem>
                    <SelectItem value="resolved">Resolved</SelectItem>
                    <SelectItem value="false_positive">False Positive</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              
              <div className="space-y-3">
                <div>
                  <h4 className="font-medium text-sm mb-1">Description</h4>
                  <p className="text-sm text-muted-foreground">{vulnerability.description}</p>
                </div>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <h4 className="font-medium text-sm mb-1">Location</h4>
                    <code className="text-sm bg-muted px-2 py-1 rounded">{vulnerability.location}</code>
                  </div>
                  <div>
                    <h4 className="font-medium text-sm mb-1">Category</h4>
                    <p className="text-sm text-muted-foreground">{vulnerability.category}</p>
                  </div>
                </div>
                
                <div>
                  <h4 className="font-medium text-sm mb-1">Recommended Fix</h4>
                  <p className="text-sm text-muted-foreground">{vulnerability.recommendedFix}</p>
                </div>
                
                <div className="flex items-center justify-between text-xs text-muted-foreground pt-2 border-t">
                  <span>Reported by {vulnerability.reportedBy}</span>
                  <span>Updated {formatDistanceToNow(vulnerability.updatedAt, { addSuffix: true })}</span>
                </div>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  );
}
