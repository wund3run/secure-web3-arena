
import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Shield, AlertTriangle, Cpu, Check } from "lucide-react";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { toast } from "sonner";

interface SecurityFinding {
  id: string;
  title: string;
  description: string;
  severity: 'critical' | 'high' | 'medium' | 'low' | 'info';
  category: string;
  status: 'open' | 'fixed' | 'acknowledged' | 'false-positive';
  detectedBy: 'ai' | 'human';
}

interface AIVulnerabilityInsightsProps {
  projectName?: string;
  repositoryUrl?: string;
}

export function AIVulnerabilityInsights({ 
  projectName = "Sample Project", 
  repositoryUrl
}: AIVulnerabilityInsightsProps) {
  const [isScanning, setIsScanning] = useState(false);
  const [scanProgress, setScanProgress] = useState(0);
  const [activeTab, setActiveTab] = useState('overview');
  const [findings, setFindings] = useState<SecurityFinding[]>([
    {
      id: "VUL-001",
      title: "Reentrancy vulnerability in withdraw function",
      description: "The contract calls an external function before updating state variables, making it vulnerable to reentrancy attacks.",
      severity: "critical",
      category: "Reentrancy",
      status: "open",
      detectedBy: "ai"
    },
    {
      id: "VUL-002",
      title: "Integer overflow in token calculation",
      description: "The token calculation function doesn't check for integer overflow, potentially leading to incorrect token amounts.",
      severity: "high",
      category: "Arithmetic",
      status: "open",
      detectedBy: "ai"
    },
    {
      id: "VUL-003",
      title: "Unchecked return value from external call",
      description: "The contract doesn't check the return value of an external call, which could lead to silent failures.",
      severity: "medium",
      category: "Input Validation",
      status: "open",
      detectedBy: "ai"
    }
  ]);

  const startScan = () => {
    setIsScanning(true);
    setScanProgress(0);
    
    // Simulate scan progress
    const interval = setInterval(() => {
      setScanProgress(prev => {
        const newProgress = prev + 5;
        if (newProgress >= 100) {
          clearInterval(interval);
          setIsScanning(false);
          toast.success("AI vulnerability scan complete", {
            description: "3 potential security issues were found",
            duration: 4000
          });
          return 100;
        }
        return newProgress;
      });
    }, 300);
  };

  const getSeverityBadge = (severity: SecurityFinding['severity']) => {
    switch (severity) {
      case 'critical':
        return <Badge variant="error">Critical</Badge>;
      case 'high':
        return <Badge variant="error" className="bg-orange-500">High</Badge>;
      case 'medium':
        return <Badge variant="outline" className="border-yellow-500 text-yellow-700">Medium</Badge>;
      case 'low':
        return <Badge variant="outline" className="border-blue-500 text-blue-700">Low</Badge>;
      case 'info':
        return <Badge variant="outline" className="border-gray-500 text-gray-700">Info</Badge>;
    }
  };

  const getStatusBadge = (status: SecurityFinding['status']) => {
    switch (status) {
      case 'open':
        return <Badge variant="outline" className="border-red-500 text-red-700">Open</Badge>;
      case 'fixed':
        return <Badge variant="outline" className="border-green-500 text-green-700">Fixed</Badge>;
      case 'acknowledged':
        return <Badge variant="outline" className="border-blue-500 text-blue-700">Acknowledged</Badge>;
      case 'false-positive':
        return <Badge variant="outline" className="border-gray-500 text-gray-700">False Positive</Badge>;
    }
  };

  const markAsFixed = (findingId: string) => {
    setFindings(prev => prev.map(finding => 
      finding.id === findingId ? { ...finding, status: 'fixed' } : finding
    ));
    toast.success("Issue marked as fixed", {
      description: "The security finding has been updated"
    });
  };

  const markAsFalsePositive = (findingId: string) => {
    setFindings(prev => prev.map(finding => 
      finding.id === findingId ? { ...finding, status: 'false-positive' } : finding
    ));
    toast.success("Issue marked as false positive", {
      description: "The security finding has been updated"
    });
  };

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <div className="flex items-start justify-between">
            <div>
              <CardTitle className="text-xl flex items-center">
                <Cpu className="mr-2 h-5 w-5 text-primary" aria-hidden="true" />
                AI-Powered Security Insights
              </CardTitle>
              <CardDescription>
                Automated vulnerability detection for {projectName}
              </CardDescription>
            </div>
            <Button
              onClick={startScan}
              disabled={isScanning}
              className="bg-gradient-to-r from-primary to-primary/80"
              aria-label={isScanning ? "Scanning in progress" : "Start security scan"}
            >
              {isScanning ? "Scanning..." : "Start Security Scan"}
            </Button>
          </div>
        </CardHeader>
        <CardContent>
          {isScanning && (
            <div className="space-y-2 mb-6">
              <div className="flex justify-between items-center">
                <span className="text-sm">Analyzing smart contract code...</span>
                <span className="text-sm font-medium">{scanProgress}%</span>
              </div>
              <Progress value={scanProgress} className="h-2" aria-label={`Scan progress: ${scanProgress}%`} />
            </div>
          )}

          <Tabs value={activeTab} onValueChange={setActiveTab}>
            <TabsList className="grid grid-cols-3 mb-6">
              <TabsTrigger value="overview" aria-label="Overview tab">Overview</TabsTrigger>
              <TabsTrigger value="findings" aria-label="Findings tab">Findings</TabsTrigger>
              <TabsTrigger value="history" aria-label="Scan history tab">Scan History</TabsTrigger>
            </TabsList>
            
            <TabsContent value="overview">
              <div className="space-y-6">
                <Card className="overflow-hidden">
                  <div className="bg-muted p-4 border-b border-border">
                    <h3 className="text-lg font-medium">Security Summary</h3>
                  </div>
                  <CardContent className="p-4">
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                      <div className="border border-border rounded-md p-4 flex items-center justify-between">
                        <div>
                          <p className="text-sm text-muted-foreground">Critical Issues</p>
                          <p className="text-2xl font-semibold text-red-500">1</p>
                        </div>
                        <AlertTriangle className="h-8 w-8 text-red-500" aria-hidden="true" />
                      </div>
                      <div className="border border-border rounded-md p-4 flex items-center justify-between">
                        <div>
                          <p className="text-sm text-muted-foreground">High Issues</p>
                          <p className="text-2xl font-semibold text-orange-500">1</p>
                        </div>
                        <AlertTriangle className="h-8 w-8 text-orange-500" aria-hidden="true" />
                      </div>
                      <div className="border border-border rounded-md p-4 flex items-center justify-between">
                        <div>
                          <p className="text-sm text-muted-foreground">Medium Issues</p>
                          <p className="text-2xl font-semibold text-yellow-500">1</p>
                        </div>
                        <AlertTriangle className="h-8 w-8 text-yellow-500" aria-hidden="true" />
                      </div>
                    </div>
                    
                    <div className="mt-6">
                      <p className="text-sm text-muted-foreground mb-2">Overall Security Score</p>
                      <div className="flex items-center">
                        <div className="w-full bg-muted rounded-full h-4 mr-4">
                          <div className="bg-red-500 h-4 rounded-full" style={{ width: '35%' }} aria-hidden="true"></div>
                        </div>
                        <span className="font-medium">35/100</span>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </div>
            </TabsContent>
            
            <TabsContent value="findings">
              <div className="space-y-4">
                {findings.map((finding) => (
                  <div key={finding.id} className="border border-border rounded-lg overflow-hidden">
                    <div className="p-4 bg-card">
                      <div className="flex justify-between items-start">
                        <div className="flex items-center gap-3">
                          <div>
                            <h4 className="font-medium">{finding.title}</h4>
                            <div className="flex items-center gap-2 mt-1">
                              <span className="text-xs text-muted-foreground">ID: {finding.id}</span>
                              <span className="text-xs text-muted-foreground">Category: {finding.category}</span>
                              {finding.detectedBy === 'ai' && (
                                <span className="bg-primary/10 text-primary text-xs px-1.5 py-0.5 rounded-sm">AI Detected</span>
                              )}
                            </div>
                          </div>
                        </div>
                        <div className="flex items-center gap-2">
                          {getSeverityBadge(finding.severity)}
                          {getStatusBadge(finding.status)}
                        </div>
                      </div>
                      <p className="mt-3 text-sm">{finding.description}</p>
                      <div className="flex gap-2 mt-4">
                        {finding.status === 'open' && (
                          <>
                            <Button 
                              size="sm" 
                              variant="outline" 
                              onClick={() => markAsFixed(finding.id)}
                              aria-label={`Mark ${finding.id} as fixed`}
                            >
                              <Check className="h-3.5 w-3.5 mr-1" aria-hidden="true" /> Mark as Fixed
                            </Button>
                            <Button 
                              size="sm" 
                              variant="ghost" 
                              onClick={() => markAsFalsePositive(finding.id)}
                              aria-label={`Mark ${finding.id} as false positive`}
                            >
                              Mark as False Positive
                            </Button>
                          </>
                        )}
                        {finding.status !== 'open' && (
                          <Button size="sm" variant="outline" aria-label={`View details for ${finding.id}`}>
                            View Details
                          </Button>
                        )}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </TabsContent>
            
            <TabsContent value="history">
              <div className="text-center py-8">
                <Shield className="mx-auto h-12 w-12 text-muted-foreground mb-3" aria-hidden="true" />
                <h3 className="text-lg font-medium">No previous scans</h3>
                <p className="text-muted-foreground mt-2 mb-6">
                  Run your first security scan to track vulnerabilities over time.
                </p>
                <Button 
                  onClick={startScan} 
                  disabled={isScanning}
                  aria-label={isScanning ? "Scanning in progress" : "Start your first security scan"}
                >
                  {isScanning ? "Scanning..." : "Start First Scan"}
                </Button>
              </div>
            </TabsContent>
          </Tabs>
        </CardContent>
      </Card>
    </div>
  );
}
