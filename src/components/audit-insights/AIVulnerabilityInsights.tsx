
import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Shield, AlertTriangle, Cpu, Check } from "lucide-react";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { toast } from "sonner";

interface SecurityFinding {
  id: string;
  title: string;
  description: string;
  severity: 'critical' | 'high' | 'medium' | 'low' | 'info';
  category: string;
  status: 'open' | 'fixed' | 'acknowledged' | 'false-positive';
  detectedBy: 'ai' | 'human';
}

interface AIVulnerabilityInsightsProps {
  projectName?: string;
  repositoryUrl?: string;
}

export function AIVulnerabilityInsights({ 
  projectName = "Sample Project", 
  repositoryUrl
}: AIVulnerabilityInsightsProps) {
  const [isScanning, setIsScanning] = useState(false);
  const [scanProgress, setScanProgress] = useState(0);
  const [activeTab, setActiveTab] = useState('overview');
  const [findings, setFindings] = useState<SecurityFinding[]>([
    {
      id: "VUL-001",
      title: "Reentrancy vulnerability in withdraw function",
      description: "The contract calls an external function before updating state variables, making it vulnerable to reentrancy attacks.",
      severity: "critical",
      category: "Reentrancy",
      status: "open",
      detectedBy: "ai"
    },
    {
      id: "VUL-002",
      title: "Integer overflow in token calculation",
      description: "The token calculation function doesn't check for integer overflow, potentially leading to incorrect token amounts.",
      severity: "high",
      category: "Arithmetic",
      status: "open",
      detectedBy: "ai"
    },
    {
      id: "VUL-003",
      title: "Unchecked return value from external call",
      description: "The contract doesn't check the return value of an external call, which could lead to silent failures.",
      severity: "medium",
      category: "Input Validation",
      status: "open",
      detectedBy: "ai"
    }
  ]);

  const startScan = () => {
    setIsScanning(true);
    setScanProgress(0);
    
    // Simulate scan progress
    const interval = setInterval(() => {
      setScanProgress(prev => {
        const newProgress = prev + 5;
        if (newProgress >= 100) {
          clearInterval(interval);
          setIsScanning(false);
          toast.success("AI vulnerability scan complete", {
            description: "3 potential security issues were found",
            duration: 4000
          });
          return 100;
        }
        return newProgress;
      });
    }, 300);
  };

  const getSeverityBadge = (severity: SecurityFinding['severity']) => {
    switch (severity) {
      case 'critical':
        return <Badge variant="destructive">Critical</Badge>;
      case 'high':
        return <Badge variant="destructive" className="bg-orange-500">High</Badge>;
      case 'medium':
        return <Badge variant="outline" className="border-yellow-500 text-yellow-700">Medium</Badge>;
      case 'low':
        return <Badge variant="outline" className="border-blue-500 text-blue-700">Low</Badge>;
      case 'info':
        return <Badge variant="outline" className="border-gray-500 text-gray-700">Info</Badge>;
    }
  };

  const getStatusBadge = (status: SecurityFinding['status']) => {
    switch (status) {
      case 'open':
        return <Badge variant="outline" className="border-red-500 text-red-700">Open</Badge>;
      case 'fixed':
        return <Badge variant="outline" className="border-green-500 text-green-700">Fixed</Badge>;
      case 'acknowledged':
        return <Badge variant="outline" className="border-blue-500 text-blue-700">Acknowledged</Badge>;
      case 'false-positive':
        return <Badge variant="outline" className="border-gray-500 text-gray-700">False Positive</Badge>;
    }
  };

  const markAsFixed = (findingId: string) => {
    setFindings(prev => prev.map(finding => 
      finding.id === findingId ? { ...finding, status: 'fixed' } : finding
    ));
    toast.success("Issue marked as fixed", {
      description: "The security finding has been updated"
    });
  };

  const markAsFalsePositive = (findingId: string) => {
    setFindings(prev => prev.map(finding => 
      finding.id === findingId ? { ...finding, status: 'false-positive' } : finding
    ));
    toast.success("Issue marked as false positive", {
      description: "The security finding has been updated"
    });
  };

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <div className="flex items-start justify-between">
            <div>
              <CardTitle className="text-xl flex items-center">
                <Cpu className="mr-2 h-5 w-5 text-primary" />
                AI-Powered Security Insights
              </CardTitle>
              <CardDescription>
                Automated vulnerability detection for {projectName}
              </CardDescription>
            </div>
            <Button
              onClick={startScan}
              disabled={isScanning}
              className="bg-gradient-to-r from-primary to-primary/80"
            >
              {isScanning ? "Scanning..." : "Start Security Scan"}
            </Button>
          </div>
        </CardHeader>
        <CardContent>
          {isScanning && (
            <div className="space-y-2 mb-6">
              <div className="flex justify-between items-center">
                <span className="text-sm">Analyzing smart contract code...</span>
                <span className="text-sm font-medium">{scanProgress}%</span>
              </div>
              <Progress value={scanProgress} className="h-2" />
            </div>
          )}

          <Tabs value={activeTab} onValueChange={setActiveTab}>
            <TabsList className="grid grid-cols-3 mb-4">
              <TabsTrigger value="overview">Overview</TabsTrigger>
              <TabsTrigger value="findings">Findings</TabsTrigger>
              <TabsTrigger value="recommendations">Recommendations</TabsTrigger>
            </TabsList>
            
            <TabsContent value="overview" className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <Card>
                  <CardContent className="pt-6 text-center">
                    <div className="text-5xl font-bold text-destructive mb-2">
                      {findings.filter(f => f.severity === 'critical' && f.status === 'open').length}
                    </div>
                    <p className="text-sm text-muted-foreground">Critical Issues</p>
                  </CardContent>
                </Card>
                <Card>
                  <CardContent className="pt-6 text-center">
                    <div className="text-5xl font-bold text-orange-500 mb-2">
                      {findings.filter(f => f.severity === 'high' && f.status === 'open').length}
                    </div>
                    <p className="text-sm text-muted-foreground">High Severity Issues</p>
                  </CardContent>
                </Card>
                <Card>
                  <CardContent className="pt-6 text-center">
                    <div className="text-5xl font-bold text-yellow-500 mb-2">
                      {findings.filter(f => f.severity === 'medium' && f.status === 'open').length}
                    </div>
                    <p className="text-sm text-muted-foreground">Medium Severity Issues</p>
                  </CardContent>
                </Card>
              </div>
              
              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">Security Overview</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <div className="flex justify-between items-center">
                      <span className="font-medium">Overall Risk Assessment</span>
                      <Badge variant="destructive">High Risk</Badge>
                    </div>
                    <div>
                      <div className="flex justify-between text-sm mb-1">
                        <span>Security Score</span>
                        <span>64/100</span>
                      </div>
                      <Progress value={64} className="h-2" />
                    </div>
                    <p className="text-sm text-muted-foreground">
                      This project has several critical security issues that need immediate attention.
                      Fix the reentrancy vulnerability in the withdraw function to significantly improve security.
                    </p>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>
            
            <TabsContent value="findings" className="space-y-4">
              {findings.map(finding => (
                <Card key={finding.id} className="overflow-hidden">
                  <CardHeader className="bg-muted/30 pb-3">
                    <div className="flex justify-between">
                      <div>
                        <CardTitle className="text-lg flex items-center">
                          <AlertTriangle className={`mr-2 h-4 w-4 ${finding.severity === 'critical' ? 'text-destructive' : finding.severity === 'high' ? 'text-orange-500' : 'text-yellow-500'}`} />
                          {finding.title}
                        </CardTitle>
                        <CardDescription>{finding.id} â€¢ {finding.category}</CardDescription>
                      </div>
                      <div className="flex space-x-2">
                        {getSeverityBadge(finding.severity)}
                        {getStatusBadge(finding.status)}
                      </div>
                    </div>
                  </CardHeader>
                  <CardContent className="pt-4">
                    <p className="text-sm mb-4">{finding.description}</p>
                    <div className="flex justify-between items-center">
                      <Badge variant="outline" className="flex items-center">
                        <Cpu className="mr-1 h-3 w-3" />
                        {finding.detectedBy === 'ai' ? 'AI detected' : 'Human audit finding'}
                      </Badge>
                      
                      {finding.status === 'open' && (
                        <div className="flex space-x-2">
                          <Button size="sm" variant="outline" onClick={() => markAsFalsePositive(finding.id)}>
                            Mark as False Positive
                          </Button>
                          <Button size="sm" onClick={() => markAsFixed(finding.id)}>
                            <Check className="mr-1 h-3 w-3" />
                            Mark as Fixed
                          </Button>
                        </div>
                      )}
                    </div>
                  </CardContent>
                </Card>
              ))}
            </TabsContent>
            
            <TabsContent value="recommendations" className="space-y-4">
              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">Recommended Actions</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <div className="p-4 border border-red-200 bg-red-50 rounded-md">
                      <h3 className="font-medium text-red-800 mb-2">Critical: Fix Reentrancy Vulnerability</h3>
                      <p className="text-sm text-red-700 mb-2">
                        Implement a Checks-Effects-Interactions pattern in the withdraw function to prevent reentrancy attacks.
                      </p>
                      <div className="bg-white p-3 rounded border border-red-100 text-xs font-mono">
                        <p className="text-gray-800">{"// Fix by updating state variables before external calls"}</p>
                        <p className="text-gray-800">{"function withdraw(uint amount) external {"}</p>
                        <p className="text-gray-800">{"  require(balances[msg.sender] >= amount);"}</p>
                        <p className="text-green-700">{"  // Update the state first"}</p>
                        <p className="text-green-700">{"  balances[msg.sender] -= amount;"}</p>
                        <p className="text-green-700">{"  // Then make the external call"}</p>
                        <p className="text-gray-800">{"  (bool success, ) = msg.sender.call{value: amount}(\"\");"}</p>
                        <p className="text-gray-800">{"  require(success, \"Transfer failed\");"}</p>
                        <p className="text-red-700">{"  // Remove this line"}</p>
                        <p className="text-red-700">{"  // balances[msg.sender] -= amount; // Vulnerable state change after external call"}</p>
                        <p className="text-gray-800">{"}"}</p>
                      </div>
                    </div>
                    
                    <div className="p-4 border border-orange-200 bg-orange-50 rounded-md">
                      <h3 className="font-medium text-orange-800 mb-2">High: Add Integer Overflow Protection</h3>
                      <p className="text-sm text-orange-700 mb-2">
                        Use SafeMath or Solidity 0.8+ built-in overflow checking for integer calculations.
                      </p>
                      <div className="bg-white p-3 rounded border border-orange-100 text-xs font-mono">
                        <p className="text-gray-800">{"// For Solidity < 0.8.0, use SafeMath"}</p>
                        <p className="text-gray-800">{"import \"@openzeppelin/contracts/math/SafeMath.sol\";"}</p>
                        <p className="text-gray-800">{"..."}</p>
                        <p className="text-gray-800">{"using SafeMath for uint256;"}</p>
                        <p className="text-gray-800">{"..."}</p>
                        <p className="text-green-700">{"// Safe calculation"}</p>
                        <p className="text-green-700">{"uint256 tokenAmount = baseAmount.mul(rate);"}</p>
                        <p className="text-red-700">{"// Unsafe calculation"}</p>
                        <p className="text-red-700">{"// uint256 tokenAmount = baseAmount * rate;"}</p>
                      </div>
                    </div>
                    
                    <div className="p-4 border border-yellow-200 bg-yellow-50 rounded-md">
                      <h3 className="font-medium text-yellow-800 mb-2">Medium: Check Return Values</h3>
                      <p className="text-sm text-yellow-700 mb-2">
                        Always check return values from external calls to ensure they succeed.
                      </p>
                      <div className="bg-white p-3 rounded border border-yellow-100 text-xs font-mono">
                        <p className="text-red-700">{"// Unchecked call"}</p>
                        <p className="text-red-700">{"// token.transfer(recipient, amount);"}</p>
                        <p className="text-gray-800">{""}</p>
                        <p className="text-green-700">{"// Checked call"}</p>
                        <p className="text-green-700">{"bool success = token.transfer(recipient, amount);"}</p>
                        <p className="text-green-700">{"require(success, \"Transfer failed\");"}</p>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>
          </Tabs>
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle className="text-lg flex items-center">
            <Shield className="mr-2 h-5 w-5 text-primary" />
            Security Best Practices
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="border rounded-md p-4">
              <h3 className="font-medium mb-2 flex items-center">
                <Check className="mr-2 h-4 w-4 text-green-600" />
                Implement Multi-Signature Controls
              </h3>
              <p className="text-sm text-muted-foreground">
                Use multi-signature wallets for critical contract functions to enhance security and prevent single points of failure.
              </p>
            </div>
            <div className="border rounded-md p-4">
              <h3 className="font-medium mb-2 flex items-center">
                <Check className="mr-2 h-4 w-4 text-green-600" />
                Perform Comprehensive Testing
              </h3>
              <p className="text-sm text-muted-foreground">
                Conduct thorough unit tests and integration tests with high code coverage to identify potential vulnerabilities.
              </p>
            </div>
            <div className="border rounded-md p-4">
              <h3 className="font-medium mb-2 flex items-center">
                <Check className="mr-2 h-4 w-4 text-green-600" />
                Use Proven Libraries
              </h3>
              <p className="text-sm text-muted-foreground">
                Leverage audited and well-tested libraries like OpenZeppelin for standard contract functionality.
              </p>
            </div>
            <div className="border rounded-md p-4">
              <h3 className="font-medium mb-2 flex items-center">
                <Check className="mr-2 h-4 w-4 text-green-600" />
                Implement Emergency Stop
              </h3>
              <p className="text-sm text-muted-foreground">
                Add circuit breaker patterns to pause contract functionality in case of emergencies or discovered vulnerabilities.
              </p>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
