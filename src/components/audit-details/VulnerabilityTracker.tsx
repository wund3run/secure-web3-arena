
import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { AlertTriangle, CheckCircle, Clock, Eye, Code, MapPin } from 'lucide-react';
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from '@/components/ui/collapsible';
import type { EnhancedAuditData, AuditFinding } from '@/hooks/useAuditDetails';

interface VulnerabilityTrackerProps {
  auditData: EnhancedAuditData;
  onUpdateFindingStatus: (findingId: string, status: string) => void;
}

const getSeverityColor = (severity: string) => {
  switch (severity) {
    case 'critical': return 'destructive';
    case 'high': return 'secondary';
    case 'medium': return 'outline';
    case 'low': return 'default';
    case 'info': return 'outline';
    default: return 'outline';
  }
};

const getSeverityIcon = (severity: string) => {
  switch (severity) {
    case 'critical':
    case 'high':
      return <AlertTriangle className="h-4 w-4" />;
    case 'medium':
      return <Clock className="h-4 w-4" />;
    case 'low':
    case 'info':
      return <Eye className="h-4 w-4" />;
    default:
      return <AlertTriangle className="h-4 w-4" />;
  }
};

const FindingCard: React.FC<{ 
  finding: AuditFinding; 
  onUpdateStatus: (status: string) => void;
}> = ({ finding, onUpdateStatus }) => {
  const [isOpen, setIsOpen] = React.useState(false);

  return (
    <Card className="mb-4">
      <Collapsible open={isOpen} onOpenChange={setIsOpen}>
        <CollapsibleTrigger asChild>
          <CardHeader className="cursor-pointer hover:bg-muted/50 transition-colors">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <Badge variant={getSeverityColor(finding.severity) as any} className="flex items-center gap-1">
                  {getSeverityIcon(finding.severity)}
                  {finding.severity}
                </Badge>
                <CardTitle className="text-base">{finding.title}</CardTitle>
              </div>
              <div className="flex items-center gap-2">
                <Badge variant={
                  finding.status === 'fixed' ? 'default' :
                  finding.status === 'acknowledged' ? 'secondary' :
                  finding.status === 'false_positive' ? 'outline' : 'destructive'
                }>
                  {finding.status.replace('_', ' ')}
                </Badge>
              </div>
            </div>
          </CardHeader>
        </CollapsibleTrigger>
        
        <CollapsibleContent>
          <CardContent className="pt-0">
            <div className="space-y-4">
              <div>
                <h4 className="font-medium mb-2">Description</h4>
                <p className="text-sm text-muted-foreground">{finding.description}</p>
              </div>

              {finding.location && (
                <div>
                  <h4 className="font-medium mb-2 flex items-center gap-2">
                    <MapPin className="h-4 w-4" />
                    Location
                  </h4>
                  <p className="text-sm font-mono bg-muted p-2 rounded">{finding.location}</p>
                </div>
              )}

              {finding.code_snippet && (
                <div>
                  <h4 className="font-medium mb-2 flex items-center gap-2">
                    <Code className="h-4 w-4" />
                    Code Snippet
                  </h4>
                  <pre className="text-sm bg-muted p-3 rounded overflow-x-auto">
                    <code>{finding.code_snippet}</code>
                  </pre>
                </div>
              )}

              {finding.recommendation && (
                <div>
                  <h4 className="font-medium mb-2 flex items-center gap-2">
                    <CheckCircle className="h-4 w-4" />
                    Recommendation
                  </h4>
                  <p className="text-sm text-muted-foreground">{finding.recommendation}</p>
                </div>
              )}

              <div className="flex gap-2 pt-4 border-t">
                <Button
                  size="sm"
                  variant="outline"
                  onClick={() => onUpdateStatus('acknowledged')}
                  disabled={finding.status === 'acknowledged'}
                >
                  Acknowledge
                </Button>
                <Button
                  size="sm"
                  variant="default"
                  onClick={() => onUpdateStatus('fixed')}
                  disabled={finding.status === 'fixed'}
                >
                  Mark as Fixed
                </Button>
                <Button
                  size="sm"
                  variant="outline"
                  onClick={() => onUpdateStatus('false_positive')}
                  disabled={finding.status === 'false_positive'}
                >
                  False Positive
                </Button>
              </div>
            </div>
          </CardContent>
        </CollapsibleContent>
      </Collapsible>
    </Card>
  );
};

export const VulnerabilityTracker: React.FC<VulnerabilityTrackerProps> = ({ 
  auditData, 
  onUpdateFindingStatus 
}) => {
  const { findings_count } = auditData;
  const totalFindings = Object.values(findings_count).reduce((sum, count) => sum + count, 0);

  const groupedFindings = auditData.findings.reduce((acc, finding) => {
    if (!acc[finding.severity]) {
      acc[finding.severity] = [];
    }
    acc[finding.severity].push(finding);
    return acc;
  }, {} as Record<string, AuditFinding[]>);

  if (totalFindings === 0) {
    return (
      <Card>
        <CardContent className="py-12 text-center">
          <CheckCircle className="h-12 w-12 text-green-500 mx-auto mb-4" />
          <h3 className="text-lg font-semibold mb-2">No Vulnerabilities Found</h3>
          <p className="text-muted-foreground">
            Great news! No security vulnerabilities have been identified so far.
          </p>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="space-y-6">
      {/* Findings Summary */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <AlertTriangle className="h-5 w-5" />
            Vulnerability Summary
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
            {Object.entries(findings_count).map(([severity, count]) => (
              <div key={severity} className="text-center">
                <div className={`text-2xl font-bold ${
                  severity === 'critical' ? 'text-red-600' :
                  severity === 'high' ? 'text-orange-600' :
                  severity === 'medium' ? 'text-yellow-600' :
                  severity === 'low' ? 'text-blue-600' : 'text-gray-600'
                }`}>
                  {count}
                </div>
                <div className="text-sm text-muted-foreground capitalize">{severity}</div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* Findings by Severity */}
      {Object.entries(groupedFindings)
        .sort(([a], [b]) => {
          const order = ['critical', 'high', 'medium', 'low', 'info'];
          return order.indexOf(a) - order.indexOf(b);
        })
        .map(([severity, findings]) => (
          <div key={severity}>
            <h3 className="text-lg font-semibold mb-4 capitalize flex items-center gap-2">
              {getSeverityIcon(severity)}
              {severity} Findings ({findings.length})
            </h3>
            {findings.map((finding) => (
              <FindingCard
                key={finding.id}
                finding={finding}
                onUpdateStatus={(status) => onUpdateFindingStatus(finding.id, status)}
              />
            ))}
          </div>
        ))}
    </div>
  );
};
