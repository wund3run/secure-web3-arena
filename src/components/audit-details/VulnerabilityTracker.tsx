
import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { AlertTriangle, CheckCircle, Clock, XCircle } from 'lucide-react';
import type { EnhancedAuditData } from '@/hooks/useAuditDetails';

interface VulnerabilityTrackerProps {
  auditData: EnhancedAuditData;
  onUpdateFindingStatus: (findingId: string, status: string) => void;
}

const getSeverityColor = (severity: string) => {
  switch (severity) {
    case 'critical': return 'bg-red-500';
    case 'high': return 'bg-orange-500';
    case 'medium': return 'bg-yellow-500';
    case 'low': return 'bg-blue-500';
    case 'info': return 'bg-gray-500';
    default: return 'bg-gray-500';
  }
};

const getStatusIcon = (status: string) => {
  switch (status) {
    case 'open': return <AlertTriangle className="h-4 w-4" />;
    case 'acknowledged': return <Clock className="h-4 w-4" />;
    case 'fixed': return <CheckCircle className="h-4 w-4" />;
    case 'false_positive': return <XCircle className="h-4 w-4" />;
    default: return <AlertTriangle className="h-4 w-4" />;
  }
};

export const VulnerabilityTracker: React.FC<VulnerabilityTrackerProps> = ({ 
  auditData, 
  onUpdateFindingStatus 
}) => {
  const totalFindings = auditData.findings.length;
  const openFindings = auditData.findings.filter(f => f.status === 'open').length;
  const fixedFindings = auditData.findings.filter(f => f.status === 'fixed').length;

  if (totalFindings === 0) {
    return (
      <Card>
        <CardContent className="py-12 text-center">
          <CheckCircle className="h-12 w-12 text-green-500 mx-auto mb-4" />
          <h3 className="text-lg font-semibold mb-2">No Vulnerabilities Found</h3>
          <p className="text-muted-foreground">
            Great news! No security vulnerabilities have been identified yet.
          </p>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="space-y-6">
      {/* Summary Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card>
          <CardContent className="p-4">
            <div className="text-2xl font-bold text-red-600">{auditData.findings_count.critical}</div>
            <div className="text-sm text-muted-foreground">Critical</div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <div className="text-2xl font-bold text-orange-600">{auditData.findings_count.high}</div>
            <div className="text-sm text-muted-foreground">High</div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <div className="text-2xl font-bold text-yellow-600">{auditData.findings_count.medium}</div>
            <div className="text-sm text-muted-foreground">Medium</div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <div className="text-2xl font-bold text-blue-600">{auditData.findings_count.low}</div>
            <div className="text-sm text-muted-foreground">Low</div>
          </CardContent>
        </Card>
      </div>

      {/* Progress Overview */}
      <Card>
        <CardHeader>
          <CardTitle>Resolution Progress</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="flex items-center justify-between mb-4">
            <span className="text-sm font-medium">Fixed: {fixedFindings}/{totalFindings}</span>
            <span className="text-sm text-muted-foreground">
              {Math.round((fixedFindings / totalFindings) * 100)}% Complete
            </span>
          </div>
          <div className="w-full bg-gray-200 rounded-full h-2">
            <div 
              className="bg-green-600 h-2 rounded-full transition-all duration-300" 
              style={{ width: `${(fixedFindings / totalFindings) * 100}%` }}
            />
          </div>
        </CardContent>
      </Card>

      {/* Findings List */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <AlertTriangle className="h-5 w-5" />
            Security Findings ({totalFindings})
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {auditData.findings.map((finding) => (
              <div key={finding.id} className="border rounded-lg p-4">
                <div className="flex items-start justify-between mb-3">
                  <div className="flex items-center gap-3">
                    <Badge className={`${getSeverityColor(finding.severity)} text-white`}>
                      {finding.severity.toUpperCase()}
                    </Badge>
                    <div className="flex items-center gap-2">
                      {getStatusIcon(finding.status)}
                      <span className="font-medium">{finding.title}</span>
                    </div>
                  </div>
                  <Badge variant="outline">
                    {finding.category}
                  </Badge>
                </div>
                
                <p className="text-muted-foreground mb-3">{finding.description}</p>
                
                {finding.location && (
                  <div className="mb-3">
                    <span className="text-sm font-medium">Location: </span>
                    <code className="text-sm bg-muted px-2 py-1 rounded">{finding.location}</code>
                  </div>
                )}
                
                {finding.recommendation && (
                  <div className="mb-3">
                    <span className="text-sm font-medium">Recommendation: </span>
                    <p className="text-sm text-muted-foreground">{finding.recommendation}</p>
                  </div>
                )}
                
                <div className="flex items-center justify-between">
                  <span className="text-xs text-muted-foreground">
                    Found on {new Date(finding.created_at).toLocaleDateString()}
                  </span>
                  
                  <div className="flex gap-2">
                    {finding.status === 'open' && (
                      <>
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => onUpdateFindingStatus(finding.id, 'acknowledged')}
                        >
                          Acknowledge
                        </Button>
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => onUpdateFindingStatus(finding.id, 'false_positive')}
                        >
                          Mark False Positive
                        </Button>
                      </>
                    )}
                    {finding.status === 'acknowledged' && (
                      <Button
                        size="sm"
                        onClick={() => onUpdateFindingStatus(finding.id, 'fixed')}
                      >
                        Mark as Fixed
                      </Button>
                    )}
                    {finding.status === 'fixed' && (
                      <Badge variant="default" className="bg-green-500">
                        <CheckCircle className="h-3 w-3 mr-1" />
                        Fixed
                      </Badge>
                    )}
                  </div>
                </div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  );
};
