
import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Search, Filter, Eye, Code, ArrowUpDown } from "lucide-react";
import { VulnerabilityDetail } from './VulnerabilityDetail';

// Define the vulnerability type
interface Vulnerability {
  id: string;
  title: string;
  severity: 'critical' | 'high' | 'medium' | 'low' | 'info';
  category: string;
  location: string;
  status: 'open' | 'reviewing' | 'fixed' | 'acknowledged';
  details: {
    description: string;
    impact: string;
    recommendation: string;
    codeSnippet?: string;
    references: string[];
  };
}

export function VulnerabilityScanner() {
  // Sample vulnerabilities data
  const vulnerabilities: Vulnerability[] = [
    {
      id: "V-001",
      title: "Reentrancy vulnerability in withdraw function",
      severity: "high",
      category: "Reentrancy",
      location: "contracts/Treasury.sol:244",
      status: "open",
      details: {
        description: "The withdraw function in Treasury.sol calls an external contract before updating the user's balance, which could allow an attacker to re-enter the function multiple times.",
        impact: "An attacker could potentially drain funds from the contract by exploiting this vulnerability.",
        recommendation: "Implement the checks-effects-interactions pattern by updating the state variables before making external calls, or use a reentrancy guard.",
        codeSnippet: `function withdraw(uint amount) public {
    require(balances[msg.sender] >= amount, "Insufficient balance");
    (bool success, ) = msg.sender.call{value: amount}("");
    require(success, "Transfer failed");
    balances[msg.sender] -= amount;
}`,
        references: [
          "https://swcregistry.io/docs/SWC-107",
          "https://docs.openzeppelin.com/contracts/4.x/api/security#ReentrancyGuard"
        ]
      }
    },
    {
      id: "V-002",
      title: "Unchecked return value from low level call",
      severity: "medium",
      category: "Unchecked Return Value",
      location: "contracts/Staking.sol:178",
      status: "reviewing",
      details: {
        description: "The contract makes a low-level call without checking the returned boolean value, which could lead to silent failures.",
        impact: "If the external call fails, the contract will not detect the failure and continue execution, potentially leading to inconsistent state.",
        recommendation: "Always check the return values of low-level calls and revert on failure.",
        codeSnippet: `function distributeRewards(address[] memory recipients) public {
    for (uint i = 0; i < recipients.length; i++) {
        payable(recipients[i]).call{value: rewards[recipients[i]]}("");
        rewards[recipients[i]] = 0;
    }
}`,
        references: [
          "https://swcregistry.io/docs/SWC-104"
        ]
      }
    },
    {
      id: "V-003",
      title: "Integer overflow in token calculation",
      severity: "medium",
      category: "Arithmetic",
      location: "contracts/Token.sol:112",
      status: "fixed",
      details: {
        description: "The function multiplies two uint256 values without checking for overflow, which could result in incorrect calculations.",
        impact: "This could lead to incorrect token allocations, potentially benefiting or harming users unintentionally.",
        recommendation: "Use SafeMath for arithmetic operations or use Solidity 0.8.x which has built-in overflow checking.",
        codeSnippet: `function calculateBonus(uint256 amount, uint256 rate) internal pure returns (uint256) {
    return amount * rate / 100;
}`,
        references: [
          "https://swcregistry.io/docs/SWC-101",
          "https://docs.openzeppelin.com/contracts/4.x/api/utils#SafeMath"
        ]
      }
    }
  ];

  const [selectedVulnerability, setSelectedVulnerability] = useState<Vulnerability | null>(null);
  const [searchQuery, setSearchQuery] = useState<string>("");
  const [filteredSeverity, setFilteredSeverity] = useState<string | null>(null);
  const [isDetailsOpen, setIsDetailsOpen] = useState<boolean>(false);

  const filteredVulnerabilities = vulnerabilities.filter(vuln => {
    const matchesSearch = searchQuery === "" || 
      vuln.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
      vuln.category.toLowerCase().includes(searchQuery.toLowerCase()) ||
      vuln.location.toLowerCase().includes(searchQuery.toLowerCase());
    
    const matchesSeverity = filteredSeverity === null || vuln.severity === filteredSeverity;
    
    return matchesSearch && matchesSeverity;
  });

  const getSeverityBadge = (severity: string) => {
    switch (severity) {
      case 'critical':
        return <Badge variant="destructive">Critical</Badge>;
      case 'high':
        return <Badge className="bg-orange-500">High</Badge>;
      case 'medium':
        return <Badge className="bg-yellow-500">Medium</Badge>;
      case 'low':
        return <Badge className="bg-blue-500">Low</Badge>;
      default:
        return <Badge variant="outline">Info</Badge>;
    }
  };

  const getStatusBadge = (status: string) => {
    switch (status) {
      case 'open':
        return <Badge variant="outline" className="text-red-500 bg-red-50">Open</Badge>;
      case 'reviewing':
        return <Badge variant="outline" className="text-yellow-500 bg-yellow-50">Reviewing</Badge>;
      case 'fixed':
        return <Badge variant="outline" className="text-green-500 bg-green-50">Fixed</Badge>;
      case 'acknowledged':
        return <Badge variant="outline" className="text-blue-500 bg-blue-50">Acknowledged</Badge>;
      default:
        return <Badge variant="outline">Unknown</Badge>;
    }
  };

  const handleViewDetails = (vulnerability: Vulnerability) => {
    setSelectedVulnerability(vulnerability);
    setIsDetailsOpen(true);
  };

  return (
    <>
      <div className="space-y-6">
        <Card>
          <CardHeader>
            <CardTitle>Vulnerability Scanner</CardTitle>
            <CardDescription>
              Detected vulnerabilities in your smart contracts
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="mb-6 flex flex-col sm:flex-row gap-3">
              <div className="relative flex-1">
                <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
                <Input
                  type="search"
                  placeholder="Search vulnerabilities..."
                  className="pl-8"
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                />
              </div>
              <div className="flex gap-2">
                <Button 
                  variant="outline" 
                  className="flex items-center"
                  onClick={() => setFilteredSeverity(filteredSeverity === "high" ? null : "high")}
                >
                  <Filter className="h-4 w-4 mr-2" />
                  {filteredSeverity ? `Filtered: ${filteredSeverity}` : "Filter"}
                </Button>
                <Button variant="outline" className="flex items-center">
                  <ArrowUpDown className="h-4 w-4 mr-2" />
                  Sort
                </Button>
              </div>
            </div>

            <div className="rounded-md border">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>ID</TableHead>
                    <TableHead>Title</TableHead>
                    <TableHead>Severity</TableHead>
                    <TableHead className="hidden md:table-cell">Category</TableHead>
                    <TableHead className="hidden lg:table-cell">Location</TableHead>
                    <TableHead>Status</TableHead>
                    <TableHead className="text-right">Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {filteredVulnerabilities.length === 0 ? (
                    <TableRow>
                      <TableCell colSpan={7} className="text-center py-6 text-muted-foreground">
                        No vulnerabilities found matching your criteria
                      </TableCell>
                    </TableRow>
                  ) : (
                    filteredVulnerabilities.map((vuln) => (
                      <TableRow key={vuln.id}>
                        <TableCell className="font-mono text-xs">{vuln.id}</TableCell>
                        <TableCell>{vuln.title}</TableCell>
                        <TableCell>{getSeverityBadge(vuln.severity)}</TableCell>
                        <TableCell className="hidden md:table-cell">{vuln.category}</TableCell>
                        <TableCell className="hidden lg:table-cell font-mono text-xs">{vuln.location}</TableCell>
                        <TableCell>{getStatusBadge(vuln.status)}</TableCell>
                        <TableCell className="text-right">
                          <Button 
                            variant="ghost" 
                            size="sm" 
                            onClick={() => handleViewDetails(vuln)}
                          >
                            <Eye className="h-4 w-4 mr-1" />
                            <span className="hidden sm:inline">View</span>
                          </Button>
                        </TableCell>
                      </TableRow>
                    ))
                  )}
                </TableBody>
              </Table>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Vulnerability Detail Dialog */}
      <VulnerabilityDetail 
        vulnerability={selectedVulnerability} 
        isOpen={isDetailsOpen}
        onClose={() => setIsDetailsOpen(false)}
      />
    </>
  );
}
