
import React from 'react';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { AlertCircle, ExternalLink, Check, AlertTriangle } from "lucide-react";

interface VulnerabilityDetailProps {
  vulnerability: any;
  isOpen: boolean;
  onClose: () => void;
}

export function VulnerabilityDetail({ vulnerability, isOpen, onClose }: VulnerabilityDetailProps) {
  if (!vulnerability) return null;

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'text-red-600';
      case 'high': return 'text-orange-500';
      case 'medium': return 'text-yellow-600';
      case 'low': return 'text-blue-600';
      default: return 'text-gray-600';
    }
  };

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case 'critical':
      case 'high':
        return <AlertCircle className={`h-5 w-5 ${getSeverityColor(severity)}`} />;
      case 'medium':
        return <AlertTriangle className={`h-5 w-5 ${getSeverityColor(severity)}`} />;
      default:
        return <Check className={`h-5 w-5 ${getSeverityColor(severity)}`} />;
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-3xl">
        <DialogHeader>
          <div className="flex items-center gap-2">
            {getSeverityIcon(vulnerability.severity)}
            <DialogTitle className="text-lg">{vulnerability.title}</DialogTitle>
          </div>
          <DialogDescription className="flex items-center gap-2 mt-1">
            <Badge variant="outline" className={`${getSeverityColor(vulnerability.severity)}`}>
              {vulnerability.severity.toUpperCase()}
            </Badge>
            <span className="text-muted-foreground">ID: {vulnerability.id}</span>
            <span className="text-muted-foreground">Category: {vulnerability.category}</span>
          </DialogDescription>
        </DialogHeader>
        
        <div className="space-y-6">
          {/* Description Section */}
          <div>
            <h3 className="text-sm font-medium text-muted-foreground mb-2">DESCRIPTION</h3>
            <p>{vulnerability.details.description}</p>
          </div>
          
          {/* Location Section */}
          <div>
            <h3 className="text-sm font-medium text-muted-foreground mb-2">LOCATION</h3>
            <div className="bg-muted p-2 rounded-md font-mono text-sm">
              {vulnerability.location}
            </div>
          </div>
          
          {/* Impact Section */}
          <div>
            <h3 className="text-sm font-medium text-muted-foreground mb-2">IMPACT</h3>
            <p>{vulnerability.details.impact}</p>
          </div>
          
          {/* Code Snippet */}
          {vulnerability.details.codeSnippet && (
            <div>
              <h3 className="text-sm font-medium text-muted-foreground mb-2">VULNERABLE CODE</h3>
              <pre className="bg-muted p-3 rounded-md font-mono text-sm overflow-x-auto">
                {vulnerability.details.codeSnippet}
              </pre>
            </div>
          )}
          
          {/* Recommendation */}
          <div>
            <h3 className="text-sm font-medium text-muted-foreground mb-2">RECOMMENDATION</h3>
            <p>{vulnerability.details.recommendation}</p>
          </div>
          
          {/* References */}
          {vulnerability.details.references && vulnerability.details.references.length > 0 && (
            <div>
              <h3 className="text-sm font-medium text-muted-foreground mb-2">REFERENCES</h3>
              <ul className="list-disc pl-5 space-y-1">
                {vulnerability.details.references.map((ref: string, index: number) => (
                  <li key={index}>
                    <a 
                      href={ref} 
                      target="_blank" 
                      rel="noopener noreferrer" 
                      className="text-primary hover:underline flex items-center"
                    >
                      {ref}
                      <ExternalLink className="h-3 w-3 ml-1" />
                    </a>
                  </li>
                ))}
              </ul>
            </div>
          )}
          
          <div className="flex justify-between pt-2">
            <Button variant="outline" onClick={onClose}>
              Close
            </Button>
            <div>
              <Button variant="outline" className="mr-2">
                Mark as Fixed
              </Button>
              <Button>
                Remediate
              </Button>
            </div>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
}
