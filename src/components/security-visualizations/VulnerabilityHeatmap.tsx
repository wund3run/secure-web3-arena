
import React from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { cn } from '@/lib/utils';
import { InfoIcon } from 'lucide-react';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";

export interface VulnerabilityCategory {
  name: string;
  count: number;
  severity: 'critical' | 'high' | 'medium' | 'low' | 'info';
}

export interface VulnerabilityHeatmapProps {
  title?: string;
  description?: string;
  categories: VulnerabilityCategory[];
  className?: string;
}

const getSeverityColor = (severity: string): string => {
  switch (severity) {
    case 'critical': return 'bg-red-500/90';
    case 'high': return 'bg-orange-500/90';
    case 'medium': return 'bg-yellow-500/90';
    case 'low': return 'bg-green-600/90';
    default: return 'bg-blue-500/90';
  }
};

export function VulnerabilityHeatmap({ 
  title = "Security Vulnerability Heatmap", 
  description = "Distribution of security vulnerabilities by type and severity", 
  categories,
  className
}: VulnerabilityHeatmapProps) {
  // Calculate the max count for scaling
  const maxCount = Math.max(...categories.map(c => c.count));
  
  // Sort categories with most critical first
  const sortedCategories = [...categories].sort((a, b) => {
    const severityOrder = { 'critical': 5, 'high': 4, 'medium': 3, 'low': 2, 'info': 1 };
    return severityOrder[b.severity] - severityOrder[a.severity] || b.count - a.count;
  });
  
  // Define severity text colors
  const severityTextColor = {
    'critical': 'text-red-500',
    'high': 'text-orange-500',
    'medium': 'text-yellow-500',
    'low': 'text-green-600',
    'info': 'text-blue-500'
  };
  
  return (
    <Card className={cn("overflow-hidden", className)}>
      <CardHeader>
        <CardTitle>{title}</CardTitle>
        <CardDescription>{description}</CardDescription>
      </CardHeader>
      
      <CardContent className="p-6">
        <div className="grid grid-cols-5 gap-1 mb-4">
          {['critical', 'high', 'medium', 'low', 'info'].map(severity => (
            <div key={severity} className="text-center">
              <Badge variant="outline" className={cn("w-full capitalize", severityTextColor[severity as keyof typeof severityTextColor])}>
                {severity}
              </Badge>
            </div>
          ))}
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {sortedCategories.map((category, index) => {
            // Calculate size proportion based on count relative to max
            const countRatio = maxCount > 0 ? category.count / maxCount : 0;
            const size = 60 + countRatio * 40; // Scale from 60% to 100%
            
            return (
              <div key={index} className="flex items-center justify-between p-3 border rounded-md hover:bg-muted/30 transition-colors">
                <div className="flex items-center gap-2">
                  <div
                    className={cn(
                      "h-10 w-10 rounded-md flex items-center justify-center",
                      getSeverityColor(category.severity)
                    )}
                    style={{ transform: `scale(${size}%)` }}
                  >
                    <span className="text-white font-bold">{category.count}</span>
                  </div>
                  <span className="font-medium">{category.name}</span>
                </div>
                
                <TooltipProvider>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <div className="flex items-center">
                        <Badge variant="outline" className={cn("capitalize", severityTextColor[category.severity as keyof typeof severityTextColor])}>
                          {category.severity}
                        </Badge>
                        <InfoIcon className="h-4 w-4 ml-1 text-muted-foreground" />
                      </div>
                    </TooltipTrigger>
                    <TooltipContent>
                      <p>{category.count} {category.severity} vulnerabilities detected</p>
                    </TooltipContent>
                  </Tooltip>
                </TooltipProvider>
              </div>
            );
          })}
        </div>
      </CardContent>
    </Card>
  );
}
